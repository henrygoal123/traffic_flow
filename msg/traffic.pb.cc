// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {

namespace {

const ::google::protobuf::Descriptor* Car_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Car_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Traffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Traffic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_traffic_2eproto() {
  protobuf_AddDesc_traffic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic.proto");
  GOOGLE_CHECK(file != NULL);
  Car_descriptor_ = file->message_type(0);
  static const int Car_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, a_),
  };
  Car_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Car_descriptor_,
      Car::default_instance_,
      Car_offsets_,
      -1,
      -1,
      -1,
      sizeof(Car),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, _is_default_instance_));
  EgoInfo_descriptor_ = file->message_type(1);
  static const int EgoInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoInfo, id_),
  };
  EgoInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgoInfo_descriptor_,
      EgoInfo::default_instance_,
      EgoInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(EgoInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgoInfo, _is_default_instance_));
  Traffic_descriptor_ = file->message_type(2);
  static const int Traffic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, cars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, egoinfo_),
  };
  Traffic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Traffic_descriptor_,
      Traffic::default_instance_,
      Traffic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Traffic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Car_descriptor_, &Car::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgoInfo_descriptor_, &EgoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Traffic_descriptor_, &Traffic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_2eproto() {
  delete Car::default_instance_;
  delete Car_reflection_;
  delete EgoInfo::default_instance_;
  delete EgoInfo_reflection_;
  delete Traffic::default_instance_;
  delete Traffic_reflection_;
}

void protobuf_AddDesc_traffic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_traffic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtraffic.proto\022\007sim_msg\"Y\n\003Car\022\n\n\002id\030\001 "
    "\001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007"
    "heading\030\005 \001(\001\022\t\n\001v\030\006 \001(\001\022\t\n\001a\030\007 \001(\001\"\025\n\007E"
    "goInfo\022\n\n\002id\030\001 \001(\005\"H\n\007Traffic\022\032\n\004cars\030\001 "
    "\003(\0132\014.sim_msg.Car\022!\n\007egoinfo\030\002 \001(\0132\020.sim"
    "_msg.EgoInfob\006proto3", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  Car::default_instance_ = new Car();
  EgoInfo::default_instance_ = new EgoInfo();
  Traffic::default_instance_ = new Traffic();
  Car::default_instance_->InitAsDefaultInstance();
  EgoInfo::default_instance_->InitAsDefaultInstance();
  Traffic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_2eproto {
  StaticDescriptorInitializer_traffic_2eproto() {
    protobuf_AddDesc_traffic_2eproto();
  }
} static_descriptor_initializer_traffic_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Car::kIdFieldNumber;
const int Car::kTFieldNumber;
const int Car::kXFieldNumber;
const int Car::kYFieldNumber;
const int Car::kHeadingFieldNumber;
const int Car::kVFieldNumber;
const int Car::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Car::Car()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Car)
}

void Car::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Car::Car(const Car& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Car)
}

void Car::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  t_ = 0;
  x_ = 0;
  y_ = 0;
  heading_ = 0;
  v_ = 0;
  a_ = 0;
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:sim_msg.Car)
  SharedDtor();
}

void Car::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Car::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Car::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Car_descriptor_;
}

const Car& Car::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Car* Car::default_instance_ = NULL;

Car* Car::New(::google::protobuf::Arena* arena) const {
  Car* n = new Car;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Car)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Car, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Car*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(t_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool Car::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Car)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t;
        break;
      }

      // optional double t = 2;
      case 2: {
        if (tag == 17) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // optional double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_v;
        break;
      }

      // optional double v = 6;
      case 6: {
        if (tag == 49) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_a;
        break;
      }

      // optional double a = 7;
      case 7: {
        if (tag == 57) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Car)
  return false;
#undef DO_
}

void Car::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Car)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double t = 2;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // optional double v = 6;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v(), output);
  }

  // optional double a = 7;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->a(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Car)
}

::google::protobuf::uint8* Car::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Car)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double t = 2;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // optional double v = 6;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v(), target);
  }

  // optional double a = 7;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->a(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Car)
  return target;
}

int Car::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Car)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional double t = 2;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // optional double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double heading = 5;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // optional double v = 6;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // optional double a = 7;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Car::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Car)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Car* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Car>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Car)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Car)
    MergeFrom(*source);
  }
}

void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Car)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
}

void Car::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {

  return true;
}

void Car::Swap(Car* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Car::InternalSwap(Car* other) {
  std::swap(id_, other->id_);
  std::swap(t_, other->t_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Car::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Car_descriptor_;
  metadata.reflection = Car_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Car

// optional int32 id = 1;
void Car::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return id_;
}
 void Car::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// optional double t = 2;
void Car::clear_t() {
  t_ = 0;
}
 double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return t_;
}
 void Car::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// optional double x = 3;
void Car::clear_x() {
  x_ = 0;
}
 double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return x_;
}
 void Car::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// optional double y = 4;
void Car::clear_y() {
  y_ = 0;
}
 double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return y_;
}
 void Car::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// optional double heading = 5;
void Car::clear_heading() {
  heading_ = 0;
}
 double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return heading_;
}
 void Car::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// optional double v = 6;
void Car::clear_v() {
  v_ = 0;
}
 double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return v_;
}
 void Car::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// optional double a = 7;
void Car::clear_a() {
  a_ = 0;
}
 double Car::a() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.a)
  return a_;
}
 void Car::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgoInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgoInfo::EgoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EgoInfo)
}

void EgoInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EgoInfo::EgoInfo(const EgoInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sim_msg.EgoInfo)
}

void EgoInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

EgoInfo::~EgoInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.EgoInfo)
  SharedDtor();
}

void EgoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EgoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgoInfo_descriptor_;
}

const EgoInfo& EgoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

EgoInfo* EgoInfo::default_instance_ = NULL;

EgoInfo* EgoInfo::New(::google::protobuf::Arena* arena) const {
  EgoInfo* n = new EgoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EgoInfo)
  id_ = 0;
}

bool EgoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EgoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EgoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EgoInfo)
  return false;
#undef DO_
}

void EgoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EgoInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.EgoInfo)
}

::google::protobuf::uint8* EgoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EgoInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EgoInfo)
  return target;
}

int EgoInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EgoInfo)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EgoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EgoInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EgoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EgoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EgoInfo)
    MergeFrom(*source);
  }
}

void EgoInfo::MergeFrom(const EgoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EgoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void EgoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EgoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoInfo::CopyFrom(const EgoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EgoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoInfo::IsInitialized() const {

  return true;
}

void EgoInfo::Swap(EgoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgoInfo::InternalSwap(EgoInfo* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgoInfo_descriptor_;
  metadata.reflection = EgoInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgoInfo

// optional int32 id = 1;
void EgoInfo::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 EgoInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.EgoInfo.id)
  return id_;
}
 void EgoInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EgoInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Traffic::kCarsFieldNumber;
const int Traffic::kEgoinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Traffic::Traffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Traffic)
}

void Traffic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  egoinfo_ = const_cast< ::sim_msg::EgoInfo*>(&::sim_msg::EgoInfo::default_instance());
}

Traffic::Traffic(const Traffic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Traffic)
}

void Traffic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  egoinfo_ = NULL;
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:sim_msg.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
  if (this != default_instance_) {
    delete egoinfo_;
  }
}

void Traffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Traffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Traffic_descriptor_;
}

const Traffic& Traffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Traffic* Traffic::default_instance_ = NULL;

Traffic* Traffic::New(::google::protobuf::Arena* arena) const {
  Traffic* n = new Traffic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Traffic)
  if (GetArenaNoVirtual() == NULL && egoinfo_ != NULL) delete egoinfo_;
  egoinfo_ = NULL;
  cars_.Clear();
}

bool Traffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Traffic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Car cars = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cars;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_egoinfo;
        break;
      }

      // optional .sim_msg.EgoInfo egoinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_egoinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egoinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Traffic)
  return false;
#undef DO_
}

void Traffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Traffic)
  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0, n = this->cars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cars(i), output);
  }

  // optional .sim_msg.EgoInfo egoinfo = 2;
  if (this->has_egoinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->egoinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Traffic)
}

::google::protobuf::uint8* Traffic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Traffic)
  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0, n = this->cars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cars(i), false, target);
  }

  // optional .sim_msg.EgoInfo egoinfo = 2;
  if (this->has_egoinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->egoinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Traffic)
  return target;
}

int Traffic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Traffic)
  int total_size = 0;

  // optional .sim_msg.EgoInfo egoinfo = 2;
  if (this->has_egoinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->egoinfo_);
  }

  // repeated .sim_msg.Car cars = 1;
  total_size += 1 * this->cars_size();
  for (int i = 0; i < this->cars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cars(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Traffic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Traffic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Traffic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Traffic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Traffic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Traffic)
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Traffic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cars_.MergeFrom(from.cars_);
  if (from.has_egoinfo()) {
    mutable_egoinfo()->::sim_msg::EgoInfo::MergeFrom(from.egoinfo());
  }
}

void Traffic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {

  return true;
}

void Traffic::Swap(Traffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Traffic::InternalSwap(Traffic* other) {
  cars_.UnsafeArenaSwap(&other->cars_);
  std::swap(egoinfo_, other->egoinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Traffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Traffic_descriptor_;
  metadata.reflection = Traffic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Traffic

// repeated .sim_msg.Car cars = 1;
int Traffic::cars_size() const {
  return cars_.size();
}
void Traffic::clear_cars() {
  cars_.Clear();
}
const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return cars_.Get(index);
}
::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
::sim_msg::Car* Traffic::add_cars() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return cars_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// optional .sim_msg.EgoInfo egoinfo = 2;
bool Traffic::has_egoinfo() const {
  return !_is_default_instance_ && egoinfo_ != NULL;
}
void Traffic::clear_egoinfo() {
  if (GetArenaNoVirtual() == NULL && egoinfo_ != NULL) delete egoinfo_;
  egoinfo_ = NULL;
}
const ::sim_msg::EgoInfo& Traffic::egoinfo() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.egoinfo)
  return egoinfo_ != NULL ? *egoinfo_ : *default_instance_->egoinfo_;
}
::sim_msg::EgoInfo* Traffic::mutable_egoinfo() {
  
  if (egoinfo_ == NULL) {
    egoinfo_ = new ::sim_msg::EgoInfo;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.egoinfo)
  return egoinfo_;
}
::sim_msg::EgoInfo* Traffic::release_egoinfo() {
  // @@protoc_insertion_point(field_release:sim_msg.Traffic.egoinfo)
  
  ::sim_msg::EgoInfo* temp = egoinfo_;
  egoinfo_ = NULL;
  return temp;
}
void Traffic::set_allocated_egoinfo(::sim_msg::EgoInfo* egoinfo) {
  delete egoinfo_;
  egoinfo_ = egoinfo;
  if (egoinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Traffic.egoinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
