// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace sim_msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_location_2eproto();
void protobuf_AssignDesc_location_2eproto();
void protobuf_ShutdownFile_location_2eproto();

class Location;

// ===================================================================

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t() const;
  void set_t(double value);

  // optional .sim_msg.Vec3 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::sim_msg::Vec3& pos() const;
  ::sim_msg::Vec3* mutable_pos();
  ::sim_msg::Vec3* release_pos();
  void set_allocated_pos(::sim_msg::Vec3* pos);

  // optional .sim_msg.Vec3 rpy = 3;
  bool has_rpy() const;
  void clear_rpy();
  static const int kRpyFieldNumber = 3;
  const ::sim_msg::Vec3& rpy() const;
  ::sim_msg::Vec3* mutable_rpy();
  ::sim_msg::Vec3* release_rpy();
  void set_allocated_rpy(::sim_msg::Vec3* rpy);

  // optional .sim_msg.Vec3 vel = 4;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 4;
  const ::sim_msg::Vec3& vel() const;
  ::sim_msg::Vec3* mutable_vel();
  ::sim_msg::Vec3* release_vel();
  void set_allocated_vel(::sim_msg::Vec3* vel);

  // optional .sim_msg.Vec3 acc = 5;
  bool has_acc() const;
  void clear_acc();
  static const int kAccFieldNumber = 5;
  const ::sim_msg::Vec3& acc() const;
  ::sim_msg::Vec3* mutable_acc();
  ::sim_msg::Vec3* release_acc();
  void set_allocated_acc(::sim_msg::Vec3* acc);

  // @@protoc_insertion_point(class_scope:sim_msg.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double t_;
  ::sim_msg::Vec3* pos_;
  ::sim_msg::Vec3* rpy_;
  ::sim_msg::Vec3* vel_;
  ::sim_msg::Vec3* acc_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_location_2eproto();
  friend void protobuf_AssignDesc_location_2eproto();
  friend void protobuf_ShutdownFile_location_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional double t = 1;
inline void Location::clear_t() {
  t_ = 0;
}
inline double Location::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.t)
  return t_;
}
inline void Location::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Location.t)
}

// optional .sim_msg.Vec3 pos = 2;
inline bool Location::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
inline void Location::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::sim_msg::Vec3& Location::pos() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::sim_msg::Vec3* Location::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.pos)
  return pos_;
}
inline ::sim_msg::Vec3* Location::release_pos() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.pos)
  
  ::sim_msg::Vec3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Location::set_allocated_pos(::sim_msg::Vec3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.pos)
}

// optional .sim_msg.Vec3 rpy = 3;
inline bool Location::has_rpy() const {
  return !_is_default_instance_ && rpy_ != NULL;
}
inline void Location::clear_rpy() {
  if (GetArenaNoVirtual() == NULL && rpy_ != NULL) delete rpy_;
  rpy_ = NULL;
}
inline const ::sim_msg::Vec3& Location::rpy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.rpy)
  return rpy_ != NULL ? *rpy_ : *default_instance_->rpy_;
}
inline ::sim_msg::Vec3* Location::mutable_rpy() {
  
  if (rpy_ == NULL) {
    rpy_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.rpy)
  return rpy_;
}
inline ::sim_msg::Vec3* Location::release_rpy() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.rpy)
  
  ::sim_msg::Vec3* temp = rpy_;
  rpy_ = NULL;
  return temp;
}
inline void Location::set_allocated_rpy(::sim_msg::Vec3* rpy) {
  delete rpy_;
  rpy_ = rpy;
  if (rpy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.rpy)
}

// optional .sim_msg.Vec3 vel = 4;
inline bool Location::has_vel() const {
  return !_is_default_instance_ && vel_ != NULL;
}
inline void Location::clear_vel() {
  if (GetArenaNoVirtual() == NULL && vel_ != NULL) delete vel_;
  vel_ = NULL;
}
inline const ::sim_msg::Vec3& Location::vel() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::sim_msg::Vec3* Location::mutable_vel() {
  
  if (vel_ == NULL) {
    vel_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.vel)
  return vel_;
}
inline ::sim_msg::Vec3* Location::release_vel() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.vel)
  
  ::sim_msg::Vec3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void Location::set_allocated_vel(::sim_msg::Vec3* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.vel)
}

// optional .sim_msg.Vec3 acc = 5;
inline bool Location::has_acc() const {
  return !_is_default_instance_ && acc_ != NULL;
}
inline void Location::clear_acc() {
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) delete acc_;
  acc_ = NULL;
}
inline const ::sim_msg::Vec3& Location::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.acc)
  return acc_ != NULL ? *acc_ : *default_instance_->acc_;
}
inline ::sim_msg::Vec3* Location::mutable_acc() {
  
  if (acc_ == NULL) {
    acc_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.acc)
  return acc_;
}
inline ::sim_msg::Vec3* Location::release_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.acc)
  
  ::sim_msg::Vec3* temp = acc_;
  acc_ = NULL;
  return temp;
}
inline void Location::set_allocated_acc(::sim_msg::Vec3* acc) {
  delete acc_;
  acc_ = acc;
  if (acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.acc)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
