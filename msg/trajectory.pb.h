// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef PROTOBUF_trajectory_2eproto__INCLUDED
#define PROTOBUF_trajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_trajectory_2eproto();
void protobuf_AssignDesc_trajectory_2eproto();
void protobuf_ShutdownFile_trajectory_2eproto();

class Traj_Point;
class trajectory;

// ===================================================================

class Traj_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Traj_Point) */ {
 public:
  Traj_Point();
  virtual ~Traj_Point();

  Traj_Point(const Traj_Point& from);

  inline Traj_Point& operator=(const Traj_Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Traj_Point& default_instance();

  void Swap(Traj_Point* other);

  // implements Message ----------------------------------------------

  inline Traj_Point* New() const { return New(NULL); }

  Traj_Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Traj_Point& from);
  void MergeFrom(const Traj_Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Traj_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t() const;
  void set_t(double value);

  // optional double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // optional double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // optional double v = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  double v() const;
  void set_v(double value);

  // optional double s = 5;
  void clear_s();
  static const int kSFieldNumber = 5;
  double s() const;
  void set_s(double value);

  // optional double a = 6;
  void clear_a();
  static const int kAFieldNumber = 6;
  double a() const;
  void set_a(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Traj_Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double t_;
  double x_;
  double y_;
  double v_;
  double s_;
  double a_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_trajectory_2eproto();
  friend void protobuf_AssignDesc_trajectory_2eproto();
  friend void protobuf_ShutdownFile_trajectory_2eproto();

  void InitAsDefaultInstance();
  static Traj_Point* default_instance_;
};
// -------------------------------------------------------------------

class trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.trajectory) */ {
 public:
  trajectory();
  virtual ~trajectory();

  trajectory(const trajectory& from);

  inline trajectory& operator=(const trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const trajectory& default_instance();

  void Swap(trajectory* other);

  // implements Message ----------------------------------------------

  inline trajectory* New() const { return New(NULL); }

  trajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const trajectory& from);
  void MergeFrom(const trajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.Traj_Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::sim_msg::Traj_Point& points(int index) const;
  ::sim_msg::Traj_Point* mutable_points(int index);
  ::sim_msg::Traj_Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Traj_Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::Traj_Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:sim_msg.trajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Traj_Point > points_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_trajectory_2eproto();
  friend void protobuf_AssignDesc_trajectory_2eproto();
  friend void protobuf_ShutdownFile_trajectory_2eproto();

  void InitAsDefaultInstance();
  static trajectory* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Traj_Point

// optional double t = 1;
inline void Traj_Point::clear_t() {
  t_ = 0;
}
inline double Traj_Point::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.t)
  return t_;
}
inline void Traj_Point::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.t)
}

// optional double x = 2;
inline void Traj_Point::clear_x() {
  x_ = 0;
}
inline double Traj_Point::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.x)
  return x_;
}
inline void Traj_Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.x)
}

// optional double y = 3;
inline void Traj_Point::clear_y() {
  y_ = 0;
}
inline double Traj_Point::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.y)
  return y_;
}
inline void Traj_Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.y)
}

// optional double v = 4;
inline void Traj_Point::clear_v() {
  v_ = 0;
}
inline double Traj_Point::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.v)
  return v_;
}
inline void Traj_Point::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.v)
}

// optional double s = 5;
inline void Traj_Point::clear_s() {
  s_ = 0;
}
inline double Traj_Point::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.s)
  return s_;
}
inline void Traj_Point::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.s)
}

// optional double a = 6;
inline void Traj_Point::clear_a() {
  a_ = 0;
}
inline double Traj_Point::a() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traj_Point.a)
  return a_;
}
inline void Traj_Point::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traj_Point.a)
}

// -------------------------------------------------------------------

// trajectory

// repeated .sim_msg.Traj_Point points = 1;
inline int trajectory::points_size() const {
  return points_.size();
}
inline void trajectory::clear_points() {
  points_.Clear();
}
inline const ::sim_msg::Traj_Point& trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.trajectory.points)
  return points_.Get(index);
}
inline ::sim_msg::Traj_Point* trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.trajectory.points)
  return points_.Mutable(index);
}
inline ::sim_msg::Traj_Point* trajectory::add_points() {
  // @@protoc_insertion_point(field_add:sim_msg.trajectory.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::Traj_Point >*
trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.trajectory.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::Traj_Point >&
trajectory::points() const {
  // @@protoc_insertion_point(field_list:sim_msg.trajectory.points)
  return points_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trajectory_2eproto__INCLUDED
