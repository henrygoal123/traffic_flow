// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef PROTOBUF_traffic_2eproto__INCLUDED
#define PROTOBUF_traffic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_traffic_2eproto();
void protobuf_AssignDesc_traffic_2eproto();
void protobuf_ShutdownFile_traffic_2eproto();

class Car;
class EgoInfo;
class Traffic;

// ===================================================================

class Car : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Car) */ {
 public:
  Car();
  virtual ~Car();

  Car(const Car& from);

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Car& default_instance();

  void Swap(Car* other);

  // implements Message ----------------------------------------------

  inline Car* New() const { return New(NULL); }

  Car* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Car& from);
  void MergeFrom(const Car& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Car* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional double t = 2;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // optional double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // optional double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // optional double heading = 5;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // optional double v = 6;
  void clear_v();
  static const int kVFieldNumber = 6;
  double v() const;
  void set_v(double value);

  // optional double a = 7;
  void clear_a();
  static const int kAFieldNumber = 7;
  double a() const;
  void set_a(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Car)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double t_;
  double x_;
  double y_;
  double heading_;
  double v_;
  double a_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Car* default_instance_;
};
// -------------------------------------------------------------------

class EgoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.EgoInfo) */ {
 public:
  EgoInfo();
  virtual ~EgoInfo();

  EgoInfo(const EgoInfo& from);

  inline EgoInfo& operator=(const EgoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EgoInfo& default_instance();

  void Swap(EgoInfo* other);

  // implements Message ----------------------------------------------

  inline EgoInfo* New() const { return New(NULL); }

  EgoInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EgoInfo& from);
  void MergeFrom(const EgoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EgoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.EgoInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static EgoInfo* default_instance_;
};
// -------------------------------------------------------------------

class Traffic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Traffic) */ {
 public:
  Traffic();
  virtual ~Traffic();

  Traffic(const Traffic& from);

  inline Traffic& operator=(const Traffic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Traffic& default_instance();

  void Swap(Traffic* other);

  // implements Message ----------------------------------------------

  inline Traffic* New() const { return New(NULL); }

  Traffic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Traffic& from);
  void MergeFrom(const Traffic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Traffic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.Car cars = 1;
  int cars_size() const;
  void clear_cars();
  static const int kCarsFieldNumber = 1;
  const ::sim_msg::Car& cars(int index) const;
  ::sim_msg::Car* mutable_cars(int index);
  ::sim_msg::Car* add_cars();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
      mutable_cars();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
      cars() const;

  // optional .sim_msg.EgoInfo egoinfo = 2;
  bool has_egoinfo() const;
  void clear_egoinfo();
  static const int kEgoinfoFieldNumber = 2;
  const ::sim_msg::EgoInfo& egoinfo() const;
  ::sim_msg::EgoInfo* mutable_egoinfo();
  ::sim_msg::EgoInfo* release_egoinfo();
  void set_allocated_egoinfo(::sim_msg::EgoInfo* egoinfo);

  // @@protoc_insertion_point(class_scope:sim_msg.Traffic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Car > cars_;
  ::sim_msg::EgoInfo* egoinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Traffic* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Car

// optional int32 id = 1;
inline void Car::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return id_;
}
inline void Car::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// optional double t = 2;
inline void Car::clear_t() {
  t_ = 0;
}
inline double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return t_;
}
inline void Car::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// optional double x = 3;
inline void Car::clear_x() {
  x_ = 0;
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return x_;
}
inline void Car::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// optional double y = 4;
inline void Car::clear_y() {
  y_ = 0;
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return y_;
}
inline void Car::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// optional double heading = 5;
inline void Car::clear_heading() {
  heading_ = 0;
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return heading_;
}
inline void Car::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// optional double v = 6;
inline void Car::clear_v() {
  v_ = 0;
}
inline double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return v_;
}
inline void Car::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// optional double a = 7;
inline void Car::clear_a() {
  a_ = 0;
}
inline double Car::a() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.a)
  return a_;
}
inline void Car::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.a)
}

// -------------------------------------------------------------------

// EgoInfo

// optional int32 id = 1;
inline void EgoInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 EgoInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.EgoInfo.id)
  return id_;
}
inline void EgoInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EgoInfo.id)
}

// -------------------------------------------------------------------

// Traffic

// repeated .sim_msg.Car cars = 1;
inline int Traffic::cars_size() const {
  return cars_.size();
}
inline void Traffic::clear_cars() {
  cars_.Clear();
}
inline const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return cars_.Get(index);
}
inline ::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
inline ::sim_msg::Car* Traffic::add_cars() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return cars_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// optional .sim_msg.EgoInfo egoinfo = 2;
inline bool Traffic::has_egoinfo() const {
  return !_is_default_instance_ && egoinfo_ != NULL;
}
inline void Traffic::clear_egoinfo() {
  if (GetArenaNoVirtual() == NULL && egoinfo_ != NULL) delete egoinfo_;
  egoinfo_ = NULL;
}
inline const ::sim_msg::EgoInfo& Traffic::egoinfo() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.egoinfo)
  return egoinfo_ != NULL ? *egoinfo_ : *default_instance_->egoinfo_;
}
inline ::sim_msg::EgoInfo* Traffic::mutable_egoinfo() {
  
  if (egoinfo_ == NULL) {
    egoinfo_ = new ::sim_msg::EgoInfo;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.egoinfo)
  return egoinfo_;
}
inline ::sim_msg::EgoInfo* Traffic::release_egoinfo() {
  // @@protoc_insertion_point(field_release:sim_msg.Traffic.egoinfo)
  
  ::sim_msg::EgoInfo* temp = egoinfo_;
  egoinfo_ = NULL;
  return temp;
}
inline void Traffic::set_allocated_egoinfo(::sim_msg::EgoInfo* egoinfo) {
  delete egoinfo_;
  egoinfo_ = egoinfo;
  if (egoinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Traffic.egoinfo)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_2eproto__INCLUDED
